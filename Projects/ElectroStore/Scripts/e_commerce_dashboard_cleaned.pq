let
    // Load CSV
    Source = Csv.Document(
        File.Contents("\\\\Mac\\Home\\Desktop\\electronics_store_excel_project\\kz.csv"),
        [Delimiter=",", Columns=8, Encoding=1252, QuoteStyle=QuoteStyle.None]
    ),

    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),

    #"Delete UTC from event_time" = Table.ReplaceValue(
        #"Promoted Headers",
        "UTC",
        "",
        Replacer.ReplaceText,
        {"event_time"}
    ),

    // Extract day/month/year as numbers
    event_time_day = Table.AddColumn(
        #"Delete UTC from event_time",
        "event_time_day",
        each Number.FromText(Text.Middle([event_time], 8, 2))
    ),

    event_time_month = Table.AddColumn(
        event_time_day,
        "event_time_month",
        each Number.FromText(Text.Middle([event_time], 5, 2))
    ),

    event_time_year = Table.AddColumn(
        event_time_month,
        "event_time_year",
        each Number.FromText(Text.Start([event_time], 4))
    ),

    // Filter out the exact 1970-01-01 00:33:40 row
    #"Filter 01-01-1970" = Table.SelectRows(
        event_time_year,
        each ([event_time] <> "1970-01-01 00:33:40" and [event_time] <> "1970-01-01 00:33:40 ")
    ),

    // Convert event_time to datetime and create date-only column
    #"Change to US Format Datetime" = Table.TransformColumnTypes(
        #"Filter 01-01-1970",
        {{"event_time", type datetime}},
        "en-US"
    ),

    #"Duplicate event_time" = Table.DuplicateColumn(
        #"Change to US Format Datetime",
        "event_time",
        "event_time - Copy"
    ),

    #"change the type from datetime to date" = Table.TransformColumnTypes(
        #"Duplicate event_time",
        {{"event_time - Copy", type date}}
    ),

    #"renamed it event_time_date" = Table.RenameColumns(
        #"change the type from datetime to date",
        {{"event_time - Copy", "event_time_date"}}
    ),

    // Replace dot by comma in price and convert to currency
    #"Replace the dot by comma in price" = Table.ReplaceValue(
        #"renamed it event_time_date",
        ".",
        ",",
        Replacer.ReplaceText,
        {"price"}
    ),

    #"Convert it to currency" = Table.TransformColumnTypes(
        #"Replace the dot by comma in price",
        {{"price", Currency.Type}}
    ),

    // Split category_code
    #"Split Column by Delimiter" = Table.SplitColumn(
        #"Convert it to currency",
        "category_code",
        Splitter.SplitTextByDelimiter(".", QuoteStyle.None),
        {"category_code.1", "category_code.2", "category_code.3"}
    ),

    #"Adjust Split for sub_cat" = Table.AddColumn(
        #"Split Column by Delimiter",
        "sub_category_name",
        each if [category_code.3] = null then null else [category_code.2]
    ),

    #"Adjust Split for product_name" = Table.AddColumn(
        #"Adjust Split for sub_cat",
        "product_name",
        each if [category_code.3] = null then [category_code.2] else [category_code.3]
    ),

    #"Remove old columns generated by split" = Table.RemoveColumns(
        #"Adjust Split for product_name",
        {"category_code.2", "category_code.3"}
    ),

    #"Rename category_code to category_name" = Table.RenameColumns(
        #"Remove old columns generated by split",
        {{"category_code.1", "category_name"}}
    ),

    #"Move splited columns next to category_name" = Table.ReorderColumns(
        #"Rename category_code to category_name",
        {"event_time", "event_time_date", "order_id", "product_id", "category_id", "category_name", "sub_category_name", "product_name", "brand", "price", "user_id"}
    ),

    #"Rename product_id to product_model_id and brand to brand_name" = Table.RenameColumns(
        #"Move splited columns next to category_name",
        {{"product_id", "product_model_id"}, {"brand", "brand_name"}}
    ),

    #"Replace null" = Table.ReplaceValue(
        #"Rename product_id to product_model_id and brand to brand_name",
        null,
        "",
        Replacer.ReplaceValue,
        {"order_id", "product_model_id", "category_id", "category_name", "sub_category_name", "product_name", "brand_name", "price", "user_id"}
    ),

    #"Changed Type" = Table.TransformColumnTypes(
        #"Replace null",
        {{"price", Currency.Type}}
    ),

    #"replace none with blank in brand_name" = Table.ReplaceValue(
        #"Changed Type",
        "none",
        "",
        Replacer.ReplaceText,
        {"brand_name"}
    ),

    // Add Flag_data column
    #"Added Custom" = Table.AddColumn(
        #"replace none with blank in brand_name",
        "Flag_data",
        each
            if [event_time] = null or [event_time] = "" or
               [order_id] = null or [order_id] = "" or
               [product_model_id] = null or [product_model_id] = "" or
               [category_id] = null or [category_id] = "" or
               [price] = null or [price] = "" or
               (try Number.From([price]) otherwise -1) <= 0
            then "Critical Missing Data"
            else if [category_name] = null or [category_name] = "" or Text.Length(Text.Remove([category_name], {"A".."Z","a".."z"})) > 0 or
                    [sub_category_name] = null or [sub_category_name] = "" or Text.Length(Text.Remove([sub_category_name], {"A".."Z","a".."z"})) > 0 or
                    [product_name] = null or [product_name] = "" or Text.Length(Text.Remove([product_name], {"A".."Z","a".."z"})) > 0 or
                    [brand_name] = null or [brand_name] = "" or Text.Length(Text.Remove([brand_name], {"A".."Z","a".."z"})) > 0 or
                    [user_id] = null or [user_id] = ""
            then "Non-Critical Missing Data"
            else "Fully Complete",
        type text
    ),

    // Exclude critical missing data
    #"Exclude Critical Missing Data" = Table.SelectRows(
        #"Added Custom",
        each [Flag_data] <> "Critical Missing Data"
    ),

    // Trim and lowercase text columns
    #"Trim cat_name, sub_cat_name,product_name,brand_name" = Table.TransformColumns(
        #"Exclude Critical Missing Data",
        {{"category_name", Text.Trim, type text}, {"sub_category_name", Text.Trim, type text}, {"product_name", Text.Trim, type text}, {"brand_name", Text.Trim, type text}}
    ),

    #"Lowercased Text" = Table.TransformColumns(
        #"Trim cat_name, sub_cat_name,product_name,brand_name",
        {{"category_name", Text.Lower, type text}, {"sub_category_name", Text.Lower, type text}, {"product_name", Text.Lower, type text}, {"brand_name", Text.Lower, type text}}
    ),

    #"Blank is unknown" = Table.ReplaceValue(
        #"Lowercased Text",
        "",
        "Unknown",
        Replacer.ReplaceValue,
        {"category_name", "sub_category_name", "product_name", "brand_name", "user_id"}
    ),

    // Insert day name
    #"Inserted Day Name" = Table.AddColumn(
        #"Blank is unknown",
        "Day Name",
        each DateTime.ToText([event_time], "dddd", "en-US"),
        type text
    ),

    // Insert rounded hour
    #"Inserted Hour" = Table.AddColumn(
    #"Inserted Day Name",
    "Hour_Rounded",
    each let
        t = Time.From([event_time]),
        h = Time.Hour(t),
        m = Time.Minute(t),
        rounded = if m >= 30 then h + 1 else h
    in
        if rounded = 24 then 0 else rounded,
    Int64.Type
),

    // Add day number (Monday=0)
    #"Added Day Number" = Table.AddColumn(
        #"Inserted Hour",
        "Day Number",
        each Date.DayOfWeek([event_time], Day.Monday),
        Int64.Type
    ),

// Ensure that user_id is of the same type in both tables
    e_commerce_dashboard_cleaned = Table.TransformColumnTypes(
        #"Added Day Number",
        {{"user_id", type text}}
    ),
    #"Exclude null and Unknown" = Table.SelectRows(e_commerce_dashboard_cleaned, each ([user_id] <> null and [user_id] <> "Unknown")),

    analysis = Table.TransformColumnTypes(
        analysis,
        {{"user_id", type text}}
    ),
    #"Exclude null" = Table.SelectRows(analysis, each [Customer_Category] <> null),
    #"Filtered Rows" = Table.SelectRows(#"Exclude null", each [BasketSegment] <> null),

// Join with analysis table on user_id
    #"Joined Tables" = Table.NestedJoin(
        #"Exclude null and Unknown",
        {"user_id"},
        #"Filtered Rows",
        {"user_id"},
        "UserData",
        JoinKind.LeftOuter
        
 ),

// Expand only the desired columns
    #"Expanded User Columns" = Table.ExpandTableColumn(
        #"Joined Tables",
        "UserData",
        {"Avg_days_between_orders", "Customer_Category", "Order_Frequency_Bin", "BasketSegment", "favorite_category"}
    )
in
    #"Expanded User Columns"
