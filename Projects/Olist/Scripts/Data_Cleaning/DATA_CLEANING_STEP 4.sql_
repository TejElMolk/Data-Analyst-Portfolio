-- ============================================
-- PHASE 2: DATA CLEANING
-- ============================================
-- STEP 4: Handling Outliers and Data Inconsistencies
-- ============================================
-- Objective: Identify and handle outliers or inconsistent values in the dataset.
-- Notes:
-- - No issues detected in numeric columns, prices, weights, dimensions, quantities, or payments.
-- - Main inconsistencies found relate to date sequences in order lifecycle and review timelines.
-- ============================================

-- Add a flag column to olist_orders to mark data quality issues related to order date sequences
ALTER TABLE olist_orders
ADD COLUMN data_quality_flag VARCHAR(20);

-- Update data_quality_flag with 'Inconsistency' when:
-- 1. Delivery to carrier date is earlier than order approval date (impossible sequence)
-- 2. Customer delivery date is earlier than carrier delivery date (impossible sequence)
-- Otherwise mark as 'Valid'
UPDATE olist_orders
SET data_quality_flag = CASE
    WHEN order_delivered_carrier_date < order_approved_at THEN 'Inconsistency'
    WHEN order_delivered_customer_date < order_delivered_carrier_date THEN 'Inconsistency'
    ELSE 'Valid'
END;

-- Review the distribution of data quality flags in the orders table
SELECT data_quality_flag
FROM olist_orders;

---------------------------------------------------------------------------------

-- Add a flag column to olist_order_reviews to mark data quality issues related to review dates
ALTER TABLE olist_order_reviews ADD COLUMN data_quality_flag VARCHAR(20);

-- Update data_quality_flag with 'Inconsistency' when review creation date is earlier than order purchase date
-- Otherwise mark as 'Valid'
UPDATE olist_order_reviews r
SET data_quality_flag = CASE
    WHEN r.review_creation_date < o.order_purchase_timestamp THEN 'Inconsistency'
    ELSE 'Valid'
END
FROM olist_orders o
WHERE r.order_id = o.order_id;

-- Review the distribution of data quality flags in the order reviews table
SELECT data_quality_flag
FROM olist_order_reviews;

-----------------------------------------------------------------------------------------------------------

-- Identify product categories that are missing English translations
SELECT product_category_name, product_category_name_english
FROM olist_product_category_name_translation
WHERE product_category_name_english IS NULL
   OR product_category_name_english = ''
   OR product_category_name_english = product_category_name;

-- Update missing or identical English translations for specific product categories
UPDATE olist_product_category_name_translation
SET product_category_name_english = CASE product_category_name
    WHEN 'consoles_games' THEN 'Consoles_&_Games'
    WHEN 'audio' THEN 'Audio'
    WHEN 'cool_stuff' THEN 'Cool_Stuff'
    WHEN 'pet_shop' THEN 'Pet_Shop'
    WHEN 'market_place' THEN 'Marketplace'
    WHEN 'la_cuisine' THEN 'Kitchen'
    WHEN 'dvds_blu_ray' THEN 'DVDs_&_Blu-ray'
    ELSE product_category_name_english
END
WHERE product_category_name = product_category_name_english;

-- Add a new column to olist_products for English category names
ALTER TABLE olist_products
ADD COLUMN product_category_name_english VARCHAR(255);

-- Update English category names in olist_products by joining with the translation table
UPDATE olist_products p
SET product_category_name_english = t.product_category_name_english
FROM olist_product_category_name_translation t
WHERE p.product_category_name = t.product_category_name;

-- Set English category name to 'unknown_category' if still NULL after update
UPDATE olist_products
SET product_category_name_english = 'unknown_category'
WHERE product_category_name_english IS NULL;

-- Review distinct product categories and their English translations
SELECT DISTINCT product_category_name_english, product_category_name
FROM olist_product_category_name_translation
ORDER BY product_category_name_english ASC;

-----------------------------------------------------------------------------------------------------------

-- Standardize city names in olist_geolocation by removing special characters and correcting inconsistencies

-- List distinct cities ordered alphabetically to identify problematic names
SELECT DISTINCT geolocation_city
FROM olist_geolocation
ORDER BY geolocation_city ASC;

-- Correct known special cases by replacing specific city names
UPDATE olist_geolocation
SET geolocation_city = CASE geolocation_city
    WHEN '* cidade' THEN 'cidade'
    WHEN '...arraial do cabo' THEN 'arraial do cabo'
    WHEN '´teresopolis' THEN 'teresopolis'
    WHEN '4º centenario' THEN 'quarto centenario'
    WHEN '4o. centenario' THEN 'quarto centenario'
    ELSE geolocation_city
END
WHERE geolocation_city IN (
    '* cidade', '...arraial do cabo', '´teresopolis', '4º centenario', '4o. centenario'
);

-- Remove accents from city names to standardize spelling
CREATE EXTENSION IF NOT EXISTS unaccent;

UPDATE olist_geolocation
SET geolocation_city = unaccent(geolocation_city);

-- Verify if any cities still contain non-alphanumeric characters (excluding spaces, dash, parentheses, comma, apostrophe)
SELECT DISTINCT geolocation_city
FROM olist_geolocation
WHERE geolocation_city ~ '[^a-zA-Z0-9\s\-\(\),'']'
ORDER BY geolocation_city ASC;

-- Remove trailing unwanted characters like '³' in city names
UPDATE olist_geolocation
SET geolocation_city = regexp_replace(geolocation_city, '³', '', 'g')
WHERE geolocation_city LIKE '%³%';

-- Replace HTML entities in city names (example: '&oacute;' to 'ó')
UPDATE olist_geolocation
SET geolocation_city = regexp_replace(geolocation_city, '&oacute;', 'ó', 'gi')
WHERE geolocation_city LIKE '%&oacute;%';

-- Replace URL-encoded apostrophes (%26apos%3b) with actual apostrophes
UPDATE olist_geolocation
SET geolocation_city = regexp_replace(geolocation_city, '%26apos%3b', '''', 'gi')
WHERE geolocation_city LIKE '%26apos%3b%';

-- Correct encoding errors by replacing '£' character with 'ã'
UPDATE olist_geolocation
SET geolocation_city = regexp_replace(geolocation_city, '£', 'ã', 'g')
WHERE geolocation_city LIKE '%£%';

-- Replace backticks '`' with apostrophes '''
UPDATE olist_geolocation
SET geolocation_city = regexp_replace(geolocation_city, '`', '''', 'g')
WHERE geolocation_city LIKE '%`%';
