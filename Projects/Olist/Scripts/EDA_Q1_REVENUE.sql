/* 
================================================================================
Question 1: Total Revenue, Monthly Evolution & Revenue by Category (Aug 2016 â€“ Aug 2018)
================================================================================

Objective / Business KPI:
- Calculate the total revenue generated by Olist over the period.
- Analyze the monthly evolution of revenue and identify key trends:
    - Monthly growth
    - Average price per product
    - Seasonality
- Analyze revenue by quarter.

Limitations:
- Only delivered orders (order_status = 'delivered') are considered.
- The year 2016 is partial and excluded from some analyses.
- 2018 data is limited to August to avoid year-end bias.

Business Questions:
1. What is the total revenue generated by Olist between August 2016 and August 2018, 
   considering partial data availability for 2016 and 2018?
2. How does this revenue evolve month by month over this period?
3. What are the key trends in:
    - Sales volume
    - Average price per product
    - Seasonality
*/


--Total_Revenue
	SELECT ROUND(SUM(price)::numeric, 2) AS Total_Revenue
    FROM olist_order_items;

--Monthly Revenue
WITH Monthly_Revenue AS (
	SELECT 
	  EXTRACT(YEAR FROM o.order_purchase_timestamp) AS year,
	  EXTRACT(MONTH FROM o.order_purchase_timestamp) AS month,
	  SUM(oi.price) AS total_revenue, 
	  COUNT(oi.order_item_id) AS quantity_sold,
	  SUM(oi.price) / COUNT(oi.order_item_id) AS average_price_per_product
	FROM olist_order_items oi 
	JOIN olist_orders o ON o.order_id = oi.order_id
	WHERE o.order_status = 'delivered'
	AND EXTRACT(YEAR FROM o.order_purchase_timestamp) != 2016
	GROUP BY year, month
),


--Monthly Revenue Growth Rate

Monthly_revenue_growth_rate AS (
	SELECT *,
	  LAG(total_revenue) OVER (ORDER BY year, month) AS previous_month_revenue,
	  ((total_revenue - LAG(total_revenue) OVER (ORDER BY year, month)) * 100.0) / 
	    NULLIF(LAG(total_revenue) OVER (ORDER BY year, month), 0) AS revenue_growth_percentage,
	  CASE 
	    WHEN ((total_revenue - LAG(total_revenue) OVER (ORDER BY year, month)) * 100.0) / 
	         NULLIF(LAG(total_revenue) OVER (ORDER BY year, month), 0) < 0 THEN 'decreasing growth'
	    WHEN ((total_revenue - LAG(total_revenue) OVER (ORDER BY year, month)) * 100.0) / 
	         NULLIF(LAG(total_revenue) OVER (ORDER BY year, month), 0) > 0 THEN 'increasing growth'
		WHEN ((total_revenue - LAG(total_revenue) OVER (ORDER BY year, month)) * 100.0) / 
	         NULLIF(LAG(total_revenue) OVER (ORDER BY year, month), 0) = 0 THEN 'stagnation' 
	    ELSE 'no_comment'
	  END AS sales_revenue_observation
	FROM Monthly_Revenue
)

SELECT *
FROM Monthly_revenue_growth_rate
ORDER BY year, month;

--------------------------------------------------------------------------------------------------------------
--Orders_With_Quarter
 WITH Orders_With_Quarter AS (
  SELECT
    o.order_id,
    oi.price,
    o.order_status,
    o.order_purchase_timestamp,
    EXTRACT(YEAR FROM o.order_purchase_timestamp) AS year,
    DATE_TRUNC('quarter', o.order_purchase_timestamp) AS quarter_month,
    CASE
      WHEN EXTRACT(MONTH FROM o.order_purchase_timestamp) BETWEEN 1 AND 3 THEN 'Q1'
      WHEN EXTRACT(MONTH FROM o.order_purchase_timestamp) BETWEEN 4 AND 6 THEN 'Q2'
      WHEN EXTRACT(MONTH FROM o.order_purchase_timestamp) BETWEEN 7 AND 9 THEN 'Q3'
      ELSE 'Q4'
    END AS quarter
  FROM olist_order_items oi
  JOIN olist_orders o ON o.order_id = oi.order_id
  WHERE o.order_status = 'delivered'
),

--Revenue_2017
Revenue_2017 AS (
  SELECT 
    quarter,
    SUM(price) AS revenue_2017
  FROM Orders_With_Quarter
  WHERE year = 2017
  GROUP BY quarter
),

--Revenue_2018
Revenue_2018 AS (
  SELECT 
    quarter,
    SUM(price) AS revenue_2018
  FROM Orders_With_Quarter
  WHERE year = 2018
  GROUP BY quarter
),

--Quarterly_Revenue_By_Year

Quarterly_Revenue_By_Year AS (
  SELECT
    COALESCE(r17.quarter, r18.quarter) AS quarter,
    r17.revenue_2017,
    r18.revenue_2018
  FROM Revenue_2017 r17
  FULL OUTER JOIN Revenue_2018 r18 ON r17.quarter = r18.quarter
),

--Seasonability_Indicators_per_quarter

Seasonability_Indicators_per_quarter AS (
  SELECT
    quarter,
    AVG(total_revenue_per_quarter) AS avg_revenue_per_quarter
  FROM (
    SELECT 
      quarter_month,
      quarter,
      SUM(price) AS total_revenue_per_quarter
    FROM Orders_With_Quarter
    WHERE year <> 2016
    GROUP BY quarter_month, quarter
  ) AS sub
  GROUP BY quarter
)

SELECT
  q.quarter,
  q.revenue_2017,
  q.revenue_2018,
  s.avg_revenue_per_quarter
FROM Quarterly_Revenue_By_Year q
LEFT JOIN Seasonability_Indicators_per_quarter s ON q.quarter = s.quarter
ORDER BY q.quarter;



